// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.zalando.komang.protobuf.Events

@SerialVersionUID(0L)
final case class ConfigCreatedEvent(
    profileId: String = "",
    configId: String = "",
    name: String = "",
    `type`: String = "",
    value: String = ""
) extends com.trueaccord.scalapb.GeneratedMessage
    with com.trueaccord.scalapb.Message[ConfigCreatedEvent]
    with com.trueaccord.lenses.Updatable[ConfigCreatedEvent] {
  @transient
  private[this] var __serializedSizeCachedValue: Int = 0
  private[this] def __computeSerializedValue(): Int = {
    var __size = 0
    if (profileId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, profileId) }
    if (configId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, configId) }
    if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name) }
    if (`type` != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, `type`) }
    if (value != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, value) }
    __size
  }
  final override def serializedSize: Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }
  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    {
      val __v = profileId
      if (__v != "") {
        _output__.writeString(1, __v)
      }
    };
    {
      val __v = configId
      if (__v != "") {
        _output__.writeString(2, __v)
      }
    };
    {
      val __v = name
      if (__v != "") {
        _output__.writeString(3, __v)
      }
    };
    {
      val __v = `type`
      if (__v != "") {
        _output__.writeString(4, __v)
      }
    };
    {
      val __v = value
      if (__v != "") {
        _output__.writeString(5, __v)
      }
    };
  }
  def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream)
    : org.zalando.komang.protobuf.Events.ConfigCreatedEvent = {
    var __profileId = this.profileId
    var __configId = this.configId
    var __name = this.name
    var __type = this.`type`
    var __value = this.value
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __profileId = _input__.readString()
        case 18 =>
          __configId = _input__.readString()
        case 26 =>
          __name = _input__.readString()
        case 34 =>
          __type = _input__.readString()
        case 42 =>
          __value = _input__.readString()
        case tag => _input__.skipField(tag)
      }
    }
    org.zalando.komang.protobuf.Events.ConfigCreatedEvent(
      profileId = __profileId,
      configId = __configId,
      name = __name,
      `type` = __type,
      value = __value
    )
  }
  def withProfileId(__v: String): ConfigCreatedEvent = copy(profileId = __v)
  def withConfigId(__v: String): ConfigCreatedEvent = copy(configId = __v)
  def withName(__v: String): ConfigCreatedEvent = copy(name = __v)
  def withType(__v: String): ConfigCreatedEvent = copy(`type` = __v)
  def withValue(__v: String): ConfigCreatedEvent = copy(value = __v)
  def getField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
    __field.getNumber match {
      case 1 => {
        val __t = profileId
        if (__t != "") __t else null
      }
      case 2 => {
        val __t = configId
        if (__t != "") __t else null
      }
      case 3 => {
        val __t = name
        if (__t != "") __t else null
      }
      case 4 => {
        val __t = `type`
        if (__t != "") __t else null
      }
      case 5 => {
        val __t = value
        if (__t != "") __t else null
      }
    }
  }
  override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
  def companion = org.zalando.komang.protobuf.Events.ConfigCreatedEvent
}

object ConfigCreatedEvent
    extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.zalando.komang.protobuf.Events.ConfigCreatedEvent] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[
    org.zalando.komang.protobuf.Events.ConfigCreatedEvent] = this
  def fromFieldsMap(
      __fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any])
    : org.zalando.komang.protobuf.Events.ConfigCreatedEvent = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor),
            "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.zalando.komang.protobuf.Events.ConfigCreatedEvent(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String]
    )
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor =
    EventsProto.javaDescriptor.getMessageTypes.get(4)
  def messageCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor)
    : _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
  def enumCompanionForField(__field: _root_.com.google.protobuf.Descriptors.FieldDescriptor)
    : _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = org.zalando.komang.protobuf.Events.ConfigCreatedEvent(
    )
  implicit class ConfigCreatedEventLens[UpperPB](
      _l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.zalando.komang.protobuf.Events.ConfigCreatedEvent])
      extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.zalando.komang.protobuf.Events.ConfigCreatedEvent](
        _l) {
    def profileId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] =
      field(_.profileId)((c_, f_) => c_.copy(profileId = f_))
    def configId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] =
      field(_.configId)((c_, f_) => c_.copy(configId = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val PROFILE_ID_FIELD_NUMBER = 1
  final val CONFIG_ID_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val TYPE_FIELD_NUMBER = 4
  final val VALUE_FIELD_NUMBER = 5
}
